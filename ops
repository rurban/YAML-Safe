{"version":1,"ops":[{"type":6,"author":{"id":"76d2899f17c7f61b2ba66f4ce8b99cf1a6972918"},"timestamp":1560804286,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDIzNzI4NjkwMA=="},"target":"4fc344fab83e05ec92bea8d46627ad679846d0cb44b5650445b2005f8b5f0bc9","message":"The README says:\n\u003e    If you set the option $YAML::Safe::IndentlessMap to 0 or undef,\n\u003e    \"YAML::Safe\" will behave like with version \u003c 0.70, which creates yml\n\u003e   files which cannot be read by \"YAML.pm\"\n\nYAML.pm can do that since 1.26:\n```\n% echo \"---\nfoo:\n- a\n- b\n\" | perl -wE'\nuse YAML;\nuse Data::Dumper;\nsay YAML-\u003eVERSION;\nmy $yaml = do { local $/ = \u003cSTDIN\u003e };\nmy $data = Load($yaml);\npipe quote\u003e say Dumper $data;'\n1.29\n$VAR1 = {\n          'foo' =\u003e [\n                     'a',\n                     'b'\n                   ]\n        };\n\n```\nFurther down:\n```\n    $YAML::Safe::IndentlessMap\n        Default 0\n\n        Set to 1 or a true value to fallback to the old \"YAML::Safe\"\n        behavior to omit the indentation of map keys, which arguably\n        violates the YAML spec, is different to all other YAML libraries and\n        causes \"YAML.pm\" to fail.\n```\n\nIt does not violate the spec, and \"is different to all other YAML libraries\" is wrong and I would like to see a proof.\n\nhttps://yaml.org/spec/1.1/\n\u003e People read the “-” character as part of the indentation. Hence, block sequence entries require one less space of indentation, unless the block sequence is nested within another block sequence (hence the need for the block-in context and block-out context).\n\n\n```\n[197] seq-spaces(n,c) ::=\tc = block-out ⇒ n-1\n                                c = block-in  ⇒ n\n```","files":null},{"type":6,"author":{"id":"76d2899f17c7f61b2ba66f4ce8b99cf1a6972918"},"timestamp":1560804595,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDIzNzI4OTA5OQ=="},"target":"4fc344fab83e05ec92bea8d46627ad679846d0cb44b5650445b2005f8b5f0bc9","message":"The README says:\n\u003e    If you set the option $YAML::Safe::IndentlessMap to 0 or undef,\n\u003e    \"YAML::Safe\" will behave like with version \u003c 0.70, which creates yml\n\u003e   files which cannot be read by \"YAML.pm\"\n\nYAML.pm can do that since 1.26:\n```\n% echo \"---\nfoo:\n- a\n- b\n\" | perl -wE'\nuse YAML;\nuse Data::Dumper;\nsay YAML-\u003eVERSION;\nmy $yaml = do { local $/ = \u003cSTDIN\u003e };\nmy $data = Load($yaml);\nsay Dumper $data;'\n1.29\n$VAR1 = {\n          'foo' =\u003e [\n                     'a',\n                     'b'\n                   ]\n        };\n\n```\nFurther down:\n```\n    $YAML::Safe::IndentlessMap\n        Default 0\n\n        Set to 1 or a true value to fallback to the old \"YAML::Safe\"\n        behavior to omit the indentation of map keys, which arguably\n        violates the YAML spec, is different to all other YAML libraries and\n        causes \"YAML.pm\" to fail.\n```\n\nIt does not violate the spec, and \"is different to all other YAML libraries\" is wrong and I would like to see a proof.\n\nhttps://yaml.org/spec/1.1/\n\u003e People read the “-” character as part of the indentation. Hence, block sequence entries require one less space of indentation, unless the block sequence is nested within another block sequence (hence the need for the block-in context and block-out context).\n\n\n```\n[197] seq-spaces(n,c) ::=\tc = block-out ⇒ n-1\n                                c = block-in  ⇒ n\n```","files":null},{"type":3,"author":{"id":"68296c2a38ad02c86df3d4558501f282a138a0ef"},"timestamp":1561450725,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUwNTMzOTU1MA==","github-url":"https://github.com/rurban/YAML-Safe/issues/1#issuecomment-505339550"},"message":"This was from an very early README.\n\nhttps://yaml.org/spec/1.0/\n\"The indentation level is always non-zero, except for the top level node of each document. This node is commonly indented by zero spaces (not indented).\"\n\nmap keys are certainly not top level, hence indent 0 was explicitly forbidden. That's why most yaml writers do that. Ingy's later addition to the 1.1 spec violated the 1.0 spec, that's why nobody did that.\n\nYAML.pm was for a long time not able to read it, hence it's forbidden to write such yaml for modules which fallback to YAML.pm, such as CPAN META.yml or distroprefs. CPAN got away by using it's secure and proprietary YAML 1.0 module in CPAN-META. \n1.2 tags made YAML insecure.\nHence the need for a safe YAML 1.2 module, with acceptable performance with a lot of external ~/.cpan/build/*.yml and ~/.cpan/prefs/*.yml files. The default is insecure and too slow.\nYAML-Syck is fine, but some clueless people prefer the insecure yaml 1.2 version (similar to the damage done in the JSON spec updates), hence the need for a safe whitelisting version, such as in other languages.","files":null},{"type":6,"author":{"id":"68296c2a38ad02c86df3d4558501f282a138a0ef"},"timestamp":1561450725,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDI0MDY4NDU1Nw=="},"target":"15afa9bb9d3a3d059a74af69061cc8dba5b0302277feeadc1ec92c90f23b1686","message":"This was from an very early README.\n\nhttps://yaml.org/spec/1.0/\n\"The indentation level is always non-zero, except for the top level node of each document. This node is commonly indented by zero spaces (not indented).\"\n\nmap keys are certainly not top level, hence indent 0 was explicitly forbidden. That's why most yaml writers do that. Ingy's later addition to the 1.1 spec violated the 1.0 spec, that's why nobody did that.\n\nYAML.pm was for a long time not able to read it, hence it's forbidden to write such yaml for modules which fallback to YAML.pm, such as CPAN META.yml or distroprefs. CPAN got away by using it's secure and proprietary YAML 1.0 module in CPAN-META. \n1.2 tags made YAML insecure.\nHence the need for a safe YAML 1.2 module, with acceptable performance with a lot of external ~/.cpan/build/\\*.yml and ~/.cpan/prefs/\\*.yml files. The default is insecure and too slow.\nYAML-Syck is fine, but some clueless people prefer the insecure yaml 1.2 version (similar to the damage done in the JSON spec updates), hence the need for a safe whitelisting version, such as in other languages.","files":null},{"type":3,"author":{"id":"76d2899f17c7f61b2ba66f4ce8b99cf1a6972918"},"timestamp":1561457314,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUwNTM3NjgxNw==","github-url":"https://github.com/rurban/YAML-Safe/issues/1#issuecomment-505376817"},"message":"\u003e https://yaml.org/spec/1.0/\n\nOh right, you're taking a YAML 1.1 processor, and everyone should know that when you write \"the spec\", you mean the 1.0 one...\n\n\u003e \"The indentation level is always non-zero, except for the top level node of each document. This node is commonly indented by zero spaces (not indented).\"\n\nMy quote of the 1.0 spec actually says that sequences that are map values don't need to be indented:\n\n\u003e The “-” sequence entry, “?” complex key and “:” mapping entry indicators are perceived by people to be part of the indentation. Hence the indentation rules are slightly more flexible when dealing with these indicators. First, a block sequence need not be indented relative to its parent node, unless that node is a block sequence entry. For example:\n\n\u003e Example 4.1. \n```\na key in a mapping at indentation level 0:\n# The value for this key is a block sequence.\n- This sequence is also at indentation level 0.\n-   Another entry in the sequence.\n- # The value of this entry is a nested sequence.\n - This nested sequence must be\n  indented at least to level 1.\n - Another entry in the nested sequence.\n- Last entry in block sequence at indentation level 0.\nsecond key in mapping: at indentation level 0.\n```\n\nBut I admit that, other than that, I don't really know the 1.0 spec.\n\n\u003e map keys are certainly not top level, hence indent 0 was explicitly forbidden\n\nI'm not sure what you mean. If you say map keys must always be indented more than 0, then the following would be invalid?\n```\n---\nfoo: bar\n```\n\n\u003e That's why most yaml writers do that\n\nWhat's your definition of \"most\"?\n\n\u003e Ingy's later addition to the 1.1 spec violated the 1.0 spec\n\nSo, a new version of the spec is created, and it changes rules. You call this violating. How can people ever release new versions of something without \"violating\" a prior version?\n\n\u003e YAML.pm was for a long time not able to read it,\n\nI'm only asking that you stick to the truth and don't just say \"YAML.pm cannot read it\". It wasn't able to, and now it can.\n\nBtw, if YAML::Syck is 1.0 and 1.0 doesn't allow it (as you think), why can YAML::Syck read it?\n\n\u003e The default is insecure and too slow.\n\nThe default what?\n\n\u003e but some clueless people prefer [...]\n\nIt's almost like you actually *want* to keep people away from working with you.\n\n\u003e the insecure yaml 1.2 version\n\nThat doesn't make sense. YAML 1.2 is insecure?\n\nReini, regarding C I'm clueless compared to you, I never really learned it, except a two week crash course.\nBut regarding YAML it's different.\n\nYou did not only change the XS code on top of libyaml, you also changed the libyaml code.\nlibyaml is still developed, although slow. I even managed to get parts of your old pull request in.\nlibyaml is tested against the yaml-test-suite.\nSeven YAML processors (I know of) are now using the yaml-test-suite.\nI'm trying to build a rich API, that does much more than just enabling or disabling loading one class.\nMaybe I can port that to XS at some point. Until then, YAML::PP::LibYAML is a good alternative and at least a bit faster than pure perl.\n\nBut you are diverging and going your own way, with your own definition of what's correct and incorrect YAML, and calling everyone clueless who has got a different opinion.\n\nMy view on Open Source includes that people ideally encourage learn from each other, at least not working against each other.\nYou have proven several times that you don't think this way.","files":null},{"type":6,"author":{"id":"76d2899f17c7f61b2ba66f4ce8b99cf1a6972918"},"timestamp":1561457314,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDI0MDc0NTgyMg=="},"target":"becc3b008863c80e134b8f169aa7bf7ed7beff3232753f9c242791b55f6b568f","message":"\u003e https://yaml.org/spec/1.0/\n\nOh right, you're taking a YAML 1.1 processor, and everyone should know that when you write \"the spec\", you mean the 1.0 one...\n\n\u003e \"The indentation level is always non-zero, except for the top level node of each document. This node is commonly indented by zero spaces (not indented).\"\n\nMy quote of the 1.0 spec actually says that sequences that are map values don't need to be indented:\n\n\u003e The “-” sequence entry, “?” complex key and “:” mapping entry indicators are perceived by people to be part of the indentation. Hence the indentation rules are slightly more flexible when dealing with these indicators. First, a block sequence need not be indented relative to its parent node, unless that node is a block sequence entry. For example:\n\n\u003e Example 4.1. \n```\na key in a mapping at indentation level 0:\n# The value for this key is a block sequence.\n- This sequence is also at indentation level 0.\n-   Another entry in the sequence.\n- # The value of this entry is a nested sequence.\n - This nested sequence must be\n  indented at least to level 1.\n - Another entry in the nested sequence.\n- Last entry in block sequence at indentation level 0.\nsecond key in mapping: at indentation level 0.\n```\n\nBut I admit that, other than that, I don't really know the 1.0 spec.\n\n\u003e map keys are certainly not top level, hence indent 0 was explicitly forbidden\n\nI'm not sure what you mean. If you say map keys must always be indented more than 0, then the following would be invalid?\n```\n---\nfoo: bar\n```\n\n\u003e That's why most yaml writers do that\n\nWhat's your definition of \"most\"?\n\n\u003e Ingy's later addition to the 1.1 spec violated the 1.0 spec\n\nSo, a new version of the spec is created, and it changes rules. You call this violating. How can people ever release new versions of something without \"violating\" a prior version?\n\n\u003e YAML.pm was for a long time not able to read it,\n\nI'm only asking that you stick to the truth and don't just say \"YAML.pm cannot read it\". It wasn't able to, and now it can.\n\nBtw, if YAML::Syck is 1.0 and 1.0 doesn't allow it (as you think), why can YAML::Syck read it?\n\n\u003e The default is insecure and too slow.\n\nThe default what?\n\n\u003e but some clueless people prefer [...]\n\nIt's almost like you actually *want* to keep people away from working with you.\n\n\u003e the insecure yaml 1.2 version\n\nThat doesn't make sense. YAML 1.2 is insecure?\n\nReini, regarding C I'm clueless compared to you, I never really learned it, except a two week crash course.\nBut regarding YAML it's different.\n\nYou did not only change the XS code on top of libyaml, you also changed the libyaml code.\nlibyaml is still developed, although slow. I even managed to get parts of your old pull request in.\nlibyaml is tested against the yaml-test-suite.\nSeven YAML processors (I know of) are now using the yaml-test-suite.\nI'm trying to build a rich API, that does much more than just enabling or disabling loading one class.\nMaybe I can port that to XS at some point. Until then, YAML::PP::LibYAML is a good alternative and at least a bit faster than pure perl.\n\nBut you are diverging and going your own way, with your own definition of what's correct and incorrect YAML, and calling everyone clueless who has got a different opinion.\n\nMy view on Open Source includes that people ideally encourage to learn from each other, at least not working against each other.\nYou have proven several times that you don't think this way.","files":null},{"type":3,"author":{"id":"68296c2a38ad02c86df3d4558501f282a138a0ef"},"timestamp":1561458174,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUwNTM4MzQzOA==","github-url":"https://github.com/rurban/YAML-Safe/issues/1#issuecomment-505383438"},"message":"So what is your proposed patch to the docs?\n\nTina Müller (tinita) \u003cnotifications@github.com\u003e schrieb am Di., 25. Juni\n2019, 12:02:\n\n\u003e https://yaml.org/spec/1.0/\n\u003e\n\u003e Oh right, you're taking a YAML 1.1 processor, and everyone should know\n\u003e that when you write \"the spec\", you mean the 1.0 one...\n\u003e\n\u003e \"The indentation level is always non-zero, except for the top level node\n\u003e of each document. This node is commonly indented by zero spaces (not\n\u003e indented).\"\n\u003e\n\u003e My quote of the 1.0 spec actually says that sequences that are map values\n\u003e don't need to be indented:\n\u003e\n\u003e The “-” sequence entry, “?” complex key and “:” mapping entry indicators\n\u003e are perceived by people to be part of the indentation. Hence the\n\u003e indentation rules are slightly more flexible when dealing with these\n\u003e indicators. First, a block sequence need not be indented relative to its\n\u003e parent node, unless that node is a block sequence entry. For example:\n\u003e\n\u003e Example 4.1.\n\u003e\n\u003e a key in a mapping at indentation level 0:\n\u003e\n\u003e # The value for this key is a block sequence.\n\u003e\n\u003e - This sequence is also at indentation level 0.\n\u003e\n\u003e -   Another entry in the sequence.\n\u003e\n\u003e - # The value of this entry is a nested sequence.\n\u003e\n\u003e  - This nested sequence must be\n\u003e\n\u003e   indented at least to level 1.\n\u003e\n\u003e  - Another entry in the nested sequence.\n\u003e\n\u003e - Last entry in block sequence at indentation level 0.\n\u003e\n\u003e second key in mapping: at indentation level 0.\n\u003e\n\u003e\n\u003e But I admit that, other than that, I don't really know the 1.0 spec.\n\u003e\n\u003e map keys are certainly not top level, hence indent 0 was explicitly\n\u003e forbidden\n\u003e\n\u003e I'm not sure what you mean. If you say map keys must always be indented\n\u003e more than 0, then the following would be invalid?\n\u003e\n\u003e ---\n\u003e\n\u003e foo: bar\n\u003e\n\u003e\n\u003e That's why most yaml writers do that\n\u003e\n\u003e What's your definition of \"most\"?\n\u003e\n\u003e Ingy's later addition to the 1.1 spec violated the 1.0 spec\n\u003e\n\u003e So, a new version of the spec is created, and it changes rules. You call\n\u003e this violating. How can people ever release new versions of something\n\u003e without \"violating\" a prior version?\n\u003e\n\u003e YAML.pm was for a long time not able to read it,\n\u003e\n\u003e I'm only asking that you stick to the truth and don't just say \"YAML.pm\n\u003e cannot read it\". It wasn't able to, and now it can.\n\u003e\n\u003e Btw, if YAML::Syck is 1.0 and 1.0 doesn't allow it (as you think), why can\n\u003e YAML::Syck read it?\n\u003e\n\u003e The default is insecure and too slow.\n\u003e\n\u003e The default what?\n\u003e\n\u003e but some clueless people prefer [...]\n\u003e\n\u003e It's almost like you actually *want* to keep people away from working\n\u003e with you.\n\u003e\n\u003e the insecure yaml 1.2 version\n\u003e\n\u003e That doesn't make sense. YAML 1.2 is insecure?\n\u003e\n\u003e Reini, regarding C I'm clueless compared to you, I never really learned\n\u003e it, except a two week crash course.\n\u003e But regarding YAML it's different.\n\u003e\n\u003e You did not only change the XS code on top of libyaml, you also changed\n\u003e the libyaml code.\n\u003e libyaml is still developed, although slow. I even managed to get parts of\n\u003e your old pull request in.\n\u003e libyaml is tested against the yaml-test-suite.\n\u003e Seven YAML processors (I know of) are now using the yaml-test-suite.\n\u003e I'm trying to build a rich API, that does much more than just enabling or\n\u003e disabling loading one class.\n\u003e Maybe I can port that to XS at some point. Until then, YAML::PP::LibYAML\n\u003e is a good alternative and at least a bit faster than pure perl.\n\u003e\n\u003e But you are diverging and going your own way, with your own definition of\n\u003e what's correct and incorrect YAML, and calling everyone clueless who has\n\u003e got a different opinion.\n\u003e\n\u003e My view on Open Source includes that people ideally encourage learn from\n\u003e each other, at least not working against each other.\n\u003e You have proven several times that you don't think this way.\n\u003e\n\u003e —\n\u003e You are receiving this because you commented.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/rurban/YAML-Safe/issues/1?email_source=notifications\u0026email_token=AAAKGUO7YH37V7BJF6WJ64DP4HUMXA5CNFSM4HY2AZGKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODYPXAMI#issuecomment-505376817\u003e,\n\u003e or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAAKGUJJNO34QIP5EQBCP33P4HUMXANCNFSM4HY2AZGA\u003e\n\u003e .\n\u003e","files":null}]}